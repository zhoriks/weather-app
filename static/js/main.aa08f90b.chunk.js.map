{"version":3,"sources":["components/Information/Information.jsx","components/Form/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Information","props","className","city","weather","temp","humidity","wind","NameForm","state","value","isLoaded","handleChange","bind","handleSubmit","handleReset","event","this","setState","target","length","error","preventDefault","fetch","response","json","result","name","description","main","speed","onClick","onSubmit","type","onChange","placeholder","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"iWAgBeA,MAZf,SAAqBC,GACjB,OACI,2BAASC,UAAU,eACnB,uBAAKA,UAAU,qBAAf,qFAAqDD,EAAME,MAC3D,uBAAKD,UAAU,qBAAf,gDAA8CD,EAAMG,SACpD,uBAAKF,UAAU,qBAAf,uEAAiDD,EAAMI,KAAvD,QACA,uBAAKH,UAAU,qBAAf,2DAA+CD,EAAMK,SAArD,KACA,uBAAKJ,UAAU,qBAAf,mCAA2CD,EAAMM,KAAjD,oBCqDOC,G,wDA3Db,WAAYP,GAAQ,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CAACC,MAAO,GAAIC,UAAU,GAEnC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBANF,E,yDASNG,GACXC,KAAKC,SAAS,CAACR,MAAOM,EAAMG,OAAOT,QAC/BM,EAAMG,OAAOT,MAAMU,QACrBH,KAAKC,SAAU,CAACP,UAAU,M,kCAIlBK,GACVC,KAAKC,SAAS,CAAEG,MAAO,O,4EAGNL,G,gFACjBA,EAAMM,iB,kBAGmBC,MAAM,oDAAD,OAAqDN,KAAKR,MAAMC,MAAhE,iE,cAAtBc,E,gBACeA,EAASC,O,cAAxBC,E,iBACAT,KAAKC,SAAS,CAClBf,KAAMuB,EAAOC,KACbvB,QAASsB,EAAOtB,QAAQ,GAAGwB,YAC3BvB,KAAMqB,EAAOG,KAAKxB,KAClBC,SAAUoB,EAAOG,KAAKvB,SACtBC,KAAMmB,EAAOnB,KAAKuB,MAClBnB,UAAU,I,0DAEVM,KAAKC,SAAS,CAAEG,MAAM,EAAD,K,gJAIjB,IAAD,EACqBJ,KAAKR,MAAzBY,EADD,EACCA,MAAOV,EADR,EACQA,SACf,OAAIU,EACK,uBAAKnB,UAAU,SACpB,uBAAKA,UAAU,eAAf,6KACA,0BAAQA,UAAU,gBAAgB6B,QAASd,KAAKF,aAAhD,uBAIF,wBAAMb,UAAU,WACd,wBAAMA,UAAU,OAAO8B,SAAUf,KAAKH,cACpC,uBAAKZ,UAAU,cAAf,mJACA,yBAAOA,UAAU,cAAc+B,KAAK,OAAOvB,MAAOO,KAAKR,MAAMC,MAAOwB,SAAUjB,KAAKL,aAAcuB,YAAY,oCAC7G,yBAAOjC,UAAU,eAAe+B,KAAK,SAASvB,MAAM,0CAErDC,GAAY,gBAAC,EAAD,CAAaR,KAAMc,KAAKR,MAAMN,KAAMC,QAASa,KAAKR,MAAML,QAASC,KAAMY,KAAKR,MAAMJ,KAAMC,SAAUW,KAAKR,MAAMH,SAAUC,KAAMU,KAAKR,MAAMF,Y,GAtDtI6B,c,YCORC,MANf,WACE,OACE,gBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,c","file":"static/js/main.aa08f90b.chunk.js","sourcesContent":["import * as React from 'react'\nimport './Information.css';\n\n\nfunction Information(props) {\n    return (\n        <section className=\"information\">\n        <div className=\"information__text\">Погода в городе: {props.city}</div>\n        <div className=\"information__text\">За окном: {props.weather}</div>\n        <div className=\"information__text\">Температура: {props.temp}&deg;</div>\n        <div className=\"information__text\">Влажность: {props.humidity}%</div>    \n        <div className=\"information__text\">Ветер: {props.wind} м/с</div>\n        </section>\n    );\n}\n\nexport default Information;","import * as React from 'react'\nimport Information from '../Information/Information' \nimport './Form.css';\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '', isLoaded: false };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    if (event.target.value.length) {\n      this.setState ({isLoaded: false});\n    }\n  }\n\n  handleReset(event) {\n    this.setState({ error: '' });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n\n    try {\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=9190638005eccb8c3ab7c13acd670d43&lang=ru&units=metric`)\n      const result = await response.json()\n      await this.setState({ \n        city: result.name, \n        weather: result.weather[0].description, \n        temp: result.main.temp,\n        humidity: result.main.humidity, \n        wind: result.wind.speed, \n        isLoaded: true })\n    } catch (err) {\n        this.setState({ error: err})\n    }\n  }\n\n  render() {\n    const { error, isLoaded } = this.state\n    if (error) {\n      return <div className=\"error\">\n        <div className=\"error__text\">Такой город отыскать не удалось :(</div>\n        <button className=\"error__button\" onClick={this.handleReset}>Еще</button>\n      </div>\n    }\n    return (\n      <main className=\"content\">\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          <div className=\"form__text\">Где вы хотите узнать погоду?</div>\n          <input className=\"form__input\" type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\" Город\"/>\n          <input className=\"form__button\" type=\"submit\" value=\"Узнать\" />\n        </form>\n        {isLoaded && <Information city={this.state.city} weather={this.state.weather} temp={this.state.temp} humidity={this.state.humidity} wind={this.state.wind}/> }\n      </main>\n    );\n  }\n}\n\nexport default NameForm;","import * as React from 'react';\nimport Form from'./components/Form/Form';\nimport './vendor/normalize.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Form />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}